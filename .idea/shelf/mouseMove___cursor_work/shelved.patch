Index: datapyc/canvas/canvas_view.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># canvas_view.py\r\n#\r\n# This file is part of datapyc.\r\n#\r\n#    Copyright (c) 2020, Jens Koch\r\n#    All rights reserved.\r\n#\r\n#    This source code is licensed under the BSD-style license found in the\r\n#    LICENSE file in the root directory of this source tree.\r\n############################################################################\r\n\r\n\r\nfrom matplotlib.backend_bases import cursors\r\nfrom matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg, NavigationToolbar2QT\r\nfrom matplotlib.figure import Figure\r\nfrom matplotlib.widgets import Cursor\r\nfrom PySide2 import QtCore\r\nfrom PySide2.QtCore import Slot\r\nfrom PySide2.QtWidgets import QFrame, QVBoxLayout\r\n\r\nimport datapyc.core.app_state as appstate\r\n\r\nfrom datapyc.core.app_state import State\r\n\r\n\r\nclass NavigationHidden(NavigationToolbar2QT):\r\n    # only connect to external buttons\r\n    toolitems = [\r\n        t for t in NavigationToolbar2QT.toolitems if t[0] in (\"Home\", \"Pan\", \"Zoom\")\r\n    ]\r\n\r\n    def __init__(self, canvas, parent, coordinates=True):\r\n        super().__init__(canvas, parent, coordinates=False)\r\n        self.set_cursor(cursors.SELECT_REGION)\r\n        self._idPress = None\r\n        self._idRelease = None\r\n\r\n    def _init_toolbar(self):\r\n        pass\r\n\r\n    def _update_buttons_checked(self):\r\n        pass\r\n\r\n    def setPanMode(self, on=True):\r\n        if on:\r\n            self._active = \"PAN\"\r\n        else:\r\n            self._active = None\r\n\r\n        if self._idPress is not None:\r\n            self._idPress = self.canvas.mpl_disconnect(self._idPress)\r\n            self.mode = \"\"\r\n        if self._idRelease is not None:\r\n            self._idRelease = self.canvas.mpl_disconnect(self._idRelease)\r\n            self.mode = \"\"\r\n\r\n        if on:\r\n            self._idPress = self.canvas.mpl_connect(\r\n                \"button_press_event\", self.press_pan\r\n            )\r\n            self._idRelease = self.canvas.mpl_connect(\r\n                \"button_release_event\", self.release_pan\r\n            )\r\n            self.mode = \"pan/zoom\"\r\n            self.canvas.widgetlock(self)\r\n        else:\r\n            self.canvas.widgetlock.release(self)\r\n\r\n        for a in self.canvas.figure.get_axes():\r\n            a.set_navigate_mode(self._active)\r\n\r\n        self.set_message(self.mode)\r\n\r\n    def setZoomMode(self, on=True):\r\n        if on:\r\n            self._active = \"ZOOM\"\r\n        else:\r\n            self._active = None\r\n\r\n        if self._idPress is not None:\r\n            self._idPress = self.canvas.mpl_disconnect(self._idPress)\r\n            self.mode = \"\"\r\n        if self._idRelease is not None:\r\n            self._idRelease = self.canvas.mpl_disconnect(self._idRelease)\r\n            self.mode = \"\"\r\n\r\n        if on:\r\n            self._idPress = self.canvas.mpl_connect(\r\n                \"button_press_event\", self.press_zoom\r\n            )\r\n            self._idRelease = self.canvas.mpl_connect(\r\n                \"button_release_event\", self.release_zoom\r\n            )\r\n            self.mode = \"zoom rect\"\r\n            self.canvas.widgetlock(self)\r\n        else:\r\n            self.canvas.widgetlock.release(self)\r\n\r\n        for a in self.canvas.figure.get_axes():\r\n            a.set_navigate_mode(self._active)\r\n        self.set_message(self.mode)\r\n\r\n    def set_cursor(self, cursor):\r\n        self.canvas.setCursor(QtCore.Qt.CrossCursor)\r\n\r\n\r\nclass FigureCanvas(QFrame):\r\n    def __init__(self, parent=None):\r\n        QFrame.__init__(self, parent)\r\n\r\n        self.canvas = FigureCanvasQTAgg(Figure())\r\n        self.toolbar = NavigationHidden(self.canvas, self)\r\n\r\n        vertical_layout = QVBoxLayout()\r\n        vertical_layout.addWidget(self.canvas)\r\n        self.setLayout(vertical_layout)\r\n\r\n        self._crosshair = None\r\n\r\n    def axes(self):\r\n        return self.canvas.figure.axes[0]\r\n\r\n    def select_crosshair(self, horizOn=True, vertOn=True):\r\n        self._crosshair = Cursor(\r\n            self.axes(),\r\n            useblit=True,\r\n            horizOn=horizOn,\r\n            vertOn=vertOn,\r\n            color=\"black\",\r\n            linewidth=1,\r\n        )\r\n        self.canvas.draw()\r\n\r\n    def zoomOn(self):\r\n        self.toolbar.setZoomMode(\r\n            on=True\r\n        )  # toggle zoom at the level of the NavigationToolbar2QT, enabling actual\r\n        # zoom functionality\r\n        appstate.state = State.ZOOM\r\n        self.select_crosshair()\r\n\r\n    def panOn(self):\r\n        self.toolbar.setPanMode(\r\n            on=True\r\n        )  # toggle pan at the level of the NavigationToolbar2QT, enabling actual\r\n        # pan functionality\r\n        appstate.state = State.PAN\r\n        self.select_crosshair()\r\n\r\n    def selectOn(self):\r\n        self.toolbar.setZoomMode(on=False)\r\n        self.toolbar.setPanMode(on=False)\r\n        appstate.state = State.SELECT\r\n        self.select_crosshair()\r\n\r\n    def calibrateOn(self, strXY):\r\n        self.toolbar.setZoomMode(on=False)\r\n        self.toolbar.setPanMode(on=False)\r\n        if strXY == \"X\":\r\n            horizOn = False\r\n            vertOn = True\r\n        else:\r\n            horizOn = True\r\n            vertOn = False\r\n        self.select_crosshair(horizOn=horizOn, vertOn=vertOn)\r\n\r\n    @Slot()\r\n    def resetView(self):\r\n        self.toolbar.home()\r\n\r\n    @Slot()\r\n    def zoomView(self):\r\n        self.zoomOn()\r\n\r\n    @Slot()\r\n    def panView(self):\r\n        self.panOn()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/datapyc/canvas/canvas_view.py b/datapyc/canvas/canvas_view.py
--- a/datapyc/canvas/canvas_view.py	(revision e1041abfefc7db5b8d491978e37c5fa0777144f8)
+++ b/datapyc/canvas/canvas_view.py	(date 1619091720893)
@@ -14,7 +14,7 @@
 from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg, NavigationToolbar2QT
 from matplotlib.figure import Figure
 from matplotlib.widgets import Cursor
-from PySide2 import QtCore
+from PySide2 import QtCore, QtGui
 from PySide2.QtCore import Slot
 from PySide2.QtWidgets import QFrame, QVBoxLayout
 
@@ -115,8 +115,20 @@
         vertical_layout.addWidget(self.canvas)
         self.setLayout(vertical_layout)
 
+        self.canvas.mpl_connect("motion_notify_event", self.mouseMove)
+
         self._crosshair = None
 
+    def mouseMove(self, event):
+        q = QtGui.QPainter(self.parent())
+        q.drawLine(event.x, event.y, 0,0)
+        print(event.x, event.y)
+        self.parent().update()
+
+    # def mouseMoveEvent(self, event : QtGui.QMouseEvent) -> None:
+    #     QtGui.QCursor.setPos(10, 10)
+    #     self.update()
+
     def axes(self):
         return self.canvas.figure.axes[0]
 
